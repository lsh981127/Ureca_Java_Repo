package com.ureca.school;

public class Student{
	private String name = "아무개";
	private int age;
	private int stuId;
	
	// 내부 값이 바뀌어야한다면 Validation 한 뒤 Setter로 바꾸는 것
	// 값을 가져갈대는 Getter
	
	// 생성자가 없으면 컴파일러가 이런 default 생성자를 알아서 생성하고 진행
	// Default 생성자 대신 다른 생성자가 있으면 default 생성자를 만들어주지 않는 이상 안된다.
	public Student() {
		setName("바보");  
		setAge(98);
		setStuId(20241225);
		
		/*
		 * this.name = "바보"; this.age = 98; this.stuId = 20241225;
		 */
	}
	
	public Student(String name, int age, int stuId) {
		// 생성자: 초기화 작업을 담당해준다.
		// 묻지마 코딩인 파트
		
//		this.name = name;
		// 이렇게 하면 성능은 떨어질 수 있지만 캡슐화는 지킨다!
		setName(name);  
		
//		this.age = age;
		setAge(age);
		
//		this.stuId = stuId;
		setStuId(stuId);
	}




	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		// 로컬 변수기 들어갈 수 있도록
		// 만약 없으면 기본 인스턴스 '아무개' 가 들어가는거야
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		checkAge(age);
	}
	
	private void checkAge(int age) {
		if (age < 1 || age > 99){
			System.out.println("Invalid Age(1 ~ 99)");
			System.exit(0);
		}else {
			this.age = age;
		}
	}

	public int getStuId() {
		return stuId;
	}

	public void setStuId(int stuId) {
		this.stuId = stuId;
	}

	
	
	// 접근 지정자, default는 package에서만 사용 가능
	// public protected deault(package) private
	// 4가지 있음
	
	
	// 캡슐화 순서
	// 1. 클래스를 private하게 만듦으로서 캡슐화 진행, 거의 몽땅 다 필드나 ㅁ메소드를 private
	// 2. public한 부분들을 최소화하기
	// 3. validation 하기. 절대 잘못된 값이 안들어가도록 설정할 것
	// 코드 재사용성, 유지보수성을 향상시키는 것이 목적
	
	
	
	
	
	
	
	public void printAll() {
		// 기본적으로 this. 은 내장되어 있음. 없어도 이미 this인것을 알긴 한다.
		System.out.println(name + "\t" + age + "\t" + stuId);		
		
	}
	
	
}
